
#ifndef experimental_array_view
#define experimental_array_view

#include <__config>

#include <cassert>
#include <vector>

_LIBCPP_BEGIN_NAMESPACE_STD

inline namespace experimental {
template <class _ValueT>
class array_view {
public:
  typedef _ValueT                                 value_type;
  typedef const _ValueT *                         pointer;
  typedef const _ValueT *                         const_pointer;
  typedef const _ValueT &                         reference;
  typedef const _ValueT &                         const_reference;
  typedef const_pointer                           const_iterator;
  typedef const_iterator                          iterator;
  typedef _VSTD::reverse_iterator<const_iterator> const_reverse_iterator;
  typedef const_reverse_iterator                  reverse_iterator;
  typedef size_t                                  size_type;
  typedef ptrdiff_t                               difference_type;

  // [array.view.cons], construct/copy
  _LIBCPP_CONSTEXPR array_view() _NOEXCEPT : __data_(nullptr), __size_(0) {}
#if !(__clang_major__ >= 3 && __clang_minor__ >= 6)
  _LIBCPP_CONSTEXPR _LIBCPP_INLINE_VISIBILITY
  array_view(const array_view &view) _NOEXCEPT
      : __data_(view.__data_),
        __size_(view.__size_) {}
#else
  _LIBCPP_CONSTEXPR _LIBCPP_INLINE_VISIBILITY
  array_view(const array_view &) _NOEXCEPT = default;
#endif
  array_view & operator=(const array_view &) _NOEXCEPT = default;

  _LIBCPP_CONSTEXPR _LIBCPP_INLINE_VISIBILITY
  array_view(const_pointer __a, size_type __len)
      : __data_(__a), __size_(__len) {
#if __cplusplus >= 201305L
    _LIBCPP_ASSERT(__len == 0 || __a, __PRETTY_FUNCTION__ ": received nullptr");
#endif
  }

  template <class _Allocator>
  _LIBCPP_INLINE_VISIBILITY
  array_view(const _VSTD::vector<_ValueT, _Allocator> &__v) _NOEXCEPT
      : __data_(__v.data()), __size_(__v.size()) {}

  template <class _CharT, class _Allocator>
  _LIBCPP_INLINE_VISIBILITY
  array_view(const _VSTD::basic_string<value_type,
                                       _CharT, _Allocator> &__s) _NOEXCEPT
      : __data_(__s.data()), __size_(__s.size()) {}

  template <size_type _Sz>
  _LIBCPP_CONSTEXPR _LIBCPP_INLINE_VISIBILITY
  array_view(const value_type (&__a)[_Sz])
      : __data_(__a), __size_(_Sz) {}

  template <size_type _Sz>
  _LIBCPP_CONSTEXPR _LIBCPP_INLINE_VISIBILITY
  array_view(const array<value_type, _Sz> &__a) _NOEXCEPT
      : __data_(__a.data()), __size_(__a.size()) {}

  // [array.view.iterators], iterators
  _LIBCPP_CONSTEXPR _LIBCPP_INLINE_VISIBILITY
  const_iterator begin() const _NOEXCEPT { return cbegin(); }
  _LIBCPP_CONSTEXPR _LIBCPP_INLINE_VISIBILITY
  const_iterator end() const _NOEXCEPT { return cend(); }

  _LIBCPP_CONSTEXPR _LIBCPP_INLINE_VISIBILITY
  const_iterator cbegin() const _NOEXCEPT { return __data_; }
  _LIBCPP_CONSTEXPR _LIBCPP_INLINE_VISIBILITY
  const_iterator cend() const _NOEXCEPT { return __data_ + __size_; }

  _LIBCPP_INLINE_VISIBILITY const_reverse_iterator rbegin() const _NOEXCEPT {
    return const_reverse_iterator(cend());
  }
  _LIBCPP_INLINE_VISIBILITY const_reverse_iterator rend() const _NOEXCEPT {
    return const_reverse_iterator(cbegin());
  }

  _LIBCPP_INLINE_VISIBILITY const_reverse_iterator crbegin() const _NOEXCEPT {
    return const_reverse_iterator(cend());
  }
  _LIBCPP_INLINE_VISIBILITY const_reverse_iterator crend() const _NOEXCEPT {
    return const_reverse_iterator(cbegin());
  }

  // [array.view.capacity], capacity
  _LIBCPP_CONSTEXPR _LIBCPP_INLINE_VISIBILITY
  size_type size() const _NOEXCEPT { return __size_; }
  _LIBCPP_CONSTEXPR _LIBCPP_INLINE_VISIBILITY
  size_type length() const _NOEXCEPT { return __size_; }
  _LIBCPP_CONSTEXPR _LIBCPP_INLINE_VISIBILITY
  size_type max_size() const _NOEXCEPT {
    return _VSTD::numeric_limits<size_type>::max();
  }
  _LIBCPP_CONSTEXPR _LIBCPP_INLINE_VISIBILITY
  bool empty() const _NOEXCEPT { return __size_ == 0; }

  // [array.view.access], element access
  _LIBCPP_CONSTEXPR _LIBCPP_INLINE_VISIBILITY
  const_reference operator[](size_type __pos) const {
    return __data_[__pos];
  }
  _LIBCPP_CONSTEXPR _LIBCPP_INLINE_VISIBILITY
  const_reference at(size_type __pos) const {
#if defined(_LIBCPP_NO_EXCEPTIONS)
#if __cplusplus >= 201305l
    assert(__pos < size() && "out of range");
#endif
    return __data_[__pos];
#else
    return __pos >= size() ? throw out_of_range(__PRETTY_FUNCTION__)
                           : __data_[__pos];
#endif
  }
  _LIBCPP_CONSTEXPR _LIBCPP_INLINE_VISIBILITY const_reference front() const {
    return _LIBCPP_ASSERT(!empty(), __PRETTY_FUNCTION__ ": array is empty"),
           __data_[0];
  }
  _LIBCPP_CONSTEXPR _LIBCPP_INLINE_VISIBILITY const_reference back() const {
    return _LIBCPP_ASSERT(!empty(), __PRETTY_FUNCTION__ ": array is empty"),
           __data_[__size_ - 1];
  }
  _LIBCPP_CONSTEXPR _LIBCPP_INLINE_VISIBILITY
  const_pointer data() const _NOEXCEPT { return __data_; }

  // [array.view.modifiers], modifiers
  _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY
  void clear() _NOEXCEPT {
    __data_ = nullptr;
    __size_ = 0;
  }
  _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY
  void remove_prefix(size_type __n) _NOEXCEPT {
    if (__n > __size_)
       __n = __size_;
    __data_ = __data_ + __n;
    __size_ = __size_ - __n;
  }
  _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY
  void remove_suffix(size_type __n) _NOEXCEPT {
    if (__n > __size_)
      __n = __size_;
    __size_ = __size_ - __n;
  }
  _LIBCPP_CONSTEXPR_AFTER_CXX11
  void swap(array_view &__other) _NOEXCEPT {
    const_pointer __p = __data_;
    __data_ = __other.__data_;
    __other.__data_ = __p;

    size_type __sz = __size_;
    __size_ = __other.__size_;
    __other.__size_ = __sz;
  }

private:
  const value_type *__data_;
  size_type __size_;
};

template <class _ValueT>
constexpr array_view<_ValueT>
make_array_view(const _ValueT *__a, size_t __len) {
  return array_view<_ValueT>(__a, __len);
}

template <class _ValueT, size_t _Sz>
constexpr array_view<_ValueT> make_array_view(const _ValueT (&__a)[_Sz]) {
  return array_view<_ValueT>(__a);
}

template <class _ValueT>
constexpr array_view<_ValueT>
make_array_view(const _VSTD::vector<_ValueT> &__v) {
  return array_view<_ValueT>(__v);
}
}

_LIBCPP_END_NAMESPACE_STD

#endif

